using Dell.Purchase.Ship.Domain.Builder.ItemStack;
using Dell.Purchase.Ship.Domain.Loggers;
using Dell.Purchase.Ship.Domain.Services.Cart;
using Dell.Purchase.Ship.Domain.Services.SalesOrder;
using Dell.Purchase.Ship.Models.Common;
using Dell.Purchase.Ship.Models.ItemStack;
using Dell.Purchase.Ship.Models.ShippingMethod;
using Dell.Purchase.Ship.Repository.SalesOrder;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace Dell.Purchase.Ship.Domain.Services.Items
{
    public interface IItemService
    {
        Task<CartContextDetails> GetUserContext(string salesOrderId);
        Task<ItemStackResponse> GetItemStackDetail(ItemStackRequest request);
    }

    public class ItemService : IItemService
    {
        private readonly ICartService _cartService;
        private readonly IItemStackBuilder _itemStackBuilder;
        private readonly ISalesOrderService _salesOrderService;
        private readonly ISalesOrderServiceRepository _salesOrderServiceRepository;

        public ItemService(ICartService cartService, IItemStackBuilder itemStackBuilder, ISalesOrderService salesOrderService, 
            IShippingMethodLogger logger, 
            ISalesOrderServiceRepository salesOrderServiceRepository)
        {
            _cartService = cartService;
            _itemStackBuilder = itemStackBuilder;
            _salesOrderService = salesOrderService;
            _salesOrderServiceRepository = salesOrderServiceRepository;
        }

        public async Task<CartContextDetails> GetUserContext(string salesOrderId)
        {
            if (salesOrderId == null)
            {
                throw new ArgumentNullException("Sales order ID cannot be null");
            }

            var salesOrder = await _salesOrderServiceRepository.GetSalesOrderAsync(salesOrderId);

            if (salesOrder != null)
            {
                var cartOrQuoteId = salesOrder.References.FirstOrDefault()?.Target.Split("/").Last();

                var cart = await _cartService.GetCartAsync(cartOrQuoteId); 

                if (cart != null)
                {
                    return new CartContextDetails
                    {
                        CartOrQuoteId = cartOrQuoteId,
                        Context = new FulfillmentChoiceContext()
                        {
                            Country = cart.CommerceContext?.Country,
                            Currency = cart.CommerceContext?.Currency,
                            Region = cart.CommerceContext?.Region,
                            Segment = cart.CommerceContext?.Segment,
                            CurrencyCultureInfo = $"{cart.CommerceContext?.Language}-{cart.CommerceContext?.Country}",
                            CustomerSet = cart.CommerceContext?.CustomerSet,
                            AccessGroup = cart.CommerceContext?.AccessGroup,
                            SourceApplicationName = cart.CommerceContext?.SourceApplicationName,
                            BusinessUnitId = cart.CommerceContext?.BusinessUnitId,
                            CompanyNumber = cart.CommerceContext?.CompanyNumber,
                            IsGop = cart.CommerceContext?.IsGOP ?? false                            
                        }
                    };
                }
            }
            return default;
        }

        public async Task<ItemStackResponse> GetItemStackDetail(ItemStackRequest request)
        {
            var salesOrder = await _salesOrderService.GetSalesOrderAsync(request.SalesOrderId);

            return _itemStackBuilder.Build(salesOrder, request);
        }

    }
}

